1. 
val_test_01.cpp
	for loop used <= n instead of <n so the loop index went past the length of the array
	delete() should be used with new() instead of free()
val_test_02.cpp
	changed i < 5 to i < 10.Extra values in the array x need to be initialized otherwise valgrind will return a warning 
    because there may be junk data in the uninitialized places in memory

2.
Running on an Intel i5-6300U 2.40GHz x 4
All results are listed below. We can see that as we reverse the order of the loops, the algorithm becomes much slower
because they were optimized for column major order. We can also see an improvement in speed from running without OpenMP
to with OpenMP.

OpenMP - Block Size 72
---------------------------------------------------------
 Dimension       Time    Gflop/s       GB/s        Error
        72   0.089033 112.352752 359.528807 0.000000e+00
       144   0.097885 102.191437 327.012598 0.000000e+00
       216   0.094872 106.224674 339.918958 0.000000e+00
       288   0.099162 101.177029 323.766493 0.000000e+00
       360   0.104144  98.558797 315.388151 0.000000e+00
       432   0.104771 100.035262 320.112838 0.000000e+00
       504   0.122783  83.414665 266.926929 0.000000e+00
       576   0.123571  92.790124 296.928398 0.000000e+00
       648   0.116498  93.425868 298.962776 0.000000e+00
       720   0.120649  92.810306 296.992980 0.000000e+00
       792   0.164471  90.616592 289.973093 0.000000e+00
       864   0.135872  94.938093 303.801898 0.000000e+00
       936   0.180192  91.016760 291.253632 0.000000e+00
      1008   0.110630  92.578225 296.250319 0.000000e+00
      1080   0.155328  81.100284 259.520910 0.000000e+00
      1152   0.162850  93.879036 300.412917 0.000000e+00
      1224   0.196905  93.129552 298.014566 0.000000e+00
      1296   0.233425  93.253851 298.412322 0.000000e+00
      1368   0.275460  92.939287 297.405717 0.000000e+00
      1440   0.319331  93.507477 299.223925 0.000000e+00
      1512   0.368322  93.848484 300.315149 0.000000e+00
      1584   0.427060  93.062890 297.801250 0.000000e+00
      1656   0.483487  93.928170 300.570145 0.000000e+00
      1728   0.534391  96.554365 308.973967 0.000000e+00
      1800   0.620818  93.940643 300.610058 0.000000e+00
      1872   0.698874  93.868254 300.378413 0.000000e+00
      1944   0.780431  94.135696 301.234226 0.000000e+00
---------------------------------------------------------
Without OpenMP - Block Size 72
---------------------------------------------------------
 Dimension       Time    Gflop/s       GB/s        Error
        72   0.433094  23.096692  73.909415 0.000000e+00
       144   0.418342  23.911172  76.515750 0.000000e+00
       216   0.437001  23.061012  73.795238 0.000000e+00
       288   0.415869  24.125154  77.200494 0.000000e+00
       360   0.460947  22.267901  71.257284 0.000000e+00
       432   0.463269  22.623598  72.395513 0.000000e+00
       504   0.448592  22.831265  73.060049 0.000000e+00
       576   0.543526  21.095925  67.506961 0.000000e+00
       648   0.563384  19.318808  61.820186 0.000000e+00
       720   0.512912  21.831111  69.859554 0.000000e+00
       792   0.684170  21.783772  69.708071 0.000000e+00
       864   0.558190  23.109410  73.950113 0.000000e+00
       936   0.748613  21.907871  70.105187 0.000000e+00
      1008   0.481020  21.292118  68.134777 0.000000e+00
      1080   0.544358  23.141253  74.052011 0.000000e+00
      1152   0.655462  23.324379  74.638013 0.000000e+00
      1224   0.800387  22.911024  73.315276 0.000000e+00
      1296   0.956305  22.762437  72.839799 0.000000e+00
      1368   1.298386  19.717619  63.096382 0.000000e+00
      1440   1.374533  21.723618  69.515577 0.000000e+00
      1512   1.677588  20.604878  65.935611 0.000000e+00
      1584   1.864996  21.310205  68.192656 0.000000e+00
      1656   2.064839  21.993524  70.379277 0.000000e+00
      1728   2.252635  22.905527  73.297688 0.000000e+00
      1800   2.530291  23.048734  73.755948 0.000000e+00
      1872   2.897290  22.642565  72.456208 0.000000e+00
      1944   3.282285  22.382698  71.624635 0.000000e+00
 Original MMult0
 -------------------------------------------------------
   for (long j = 0; j < n; j++) {
    for (long p = 0; p < k; p++) {
      for (long i = 0; i < m; i++) {
        double A_ip = a[i+p*m];
        double B_pj = b[p+j*k];
        double C_ij = c[i+j*m];
        C_ij = C_ij + A_ip * B_pj;
        c[i+j*m] = C_ij;
      }
    }
  }
---------------------------------------------------------      
 Dimension       Time    Gflop/s       GB/s        Error
        16   0.428289  23.348759  74.716028 1.385951e+06
        64   0.377352  26.502568  84.808216 9.440258e+04
       112   0.410765  24.352341  77.927493 2.693089e+04
       160   0.459280  21.849830  69.919455 1.233188e+04
       208   0.458519  21.981170  70.339744 7.315887e+03
       256   0.454820  22.132563  70.824201 4.826596e+03
       304   0.467004  21.657202  69.303045 3.267805e+03
       352   0.457164  21.942407  70.215702 2.471286e+03
       400   0.479568  21.352572  68.328229 1.891448e+03
       448   0.500131  21.574031  69.036898 1.574612e+03
       496   0.537842  20.418940  65.340609 1.312905e+03
       544   0.641885  17.556471  56.180707 1.104834e+03
       592   0.799820  12.970092  41.504295 8.560616e+02
       640   0.655963  15.985295  51.152944 7.445709e+02
       688   0.854070  15.252179  48.806972 7.953869e+02
       736   0.844407  14.164560  45.326592 6.299729e+02
       784   0.974635  14.832953  47.465450 6.724575e+02
       832   0.769176  14.975258  47.920825 4.889743e+02
       880   0.920956  14.799237  47.357557 4.996540e+02
       928   1.155571  13.831750  44.261598 5.309204e+02
       976   1.327099  14.011225  44.835921 5.570778e+02
      1024   0.764505  14.044935  44.943791 2.879263e+02
      1072   1.059493  11.627497  37.207991 3.032963e+02
      1120   0.964454  14.567078  46.614649 3.193277e+02
      1168   1.154870  13.797348  44.151512 3.318287e+02
      1216   1.260776  14.261423  45.636553 3.425009e+02
      1264   1.354934  14.904695  47.695025 3.541980e+02
      1312   1.522541  14.833123  47.465993 3.661419e+02
      1360   1.697358  14.819829  47.423453 3.795629e+02
      1408   1.873012  14.902784  47.688909 3.887651e+02
      1456   2.125147  14.524296  46.477747 4.048556e+02
      1504   2.298632  14.800418  47.361337 4.184804e+02
      1552   2.532567  14.760945  47.235024 4.322260e+02
      1600   2.755633  14.864098  47.565113 4.431469e+02
      1648   3.029563  14.773780  47.276096 4.596910e+02
      1696   3.299747  14.784170  47.309342 4.692641e+02
      1744   3.615063  14.673155  46.954097 4.866494e+02
      1792   3.915388  14.697357  47.031542 4.954003e+02
      1840   4.237734  14.700083  47.040267 5.048999e+02
      1888   4.603024  14.620518  46.785658 5.153721e+02
      1936   5.383889  13.477830  43.129056 5.383513e+02
      1984   5.312971  14.698991  47.036772 5.441071e+02
--------------------------------------------------------
  for (long p = 0; p < k; p++) {
    for (long j = 0; j < n; j++) {
      for (long i = 0; i < m; i++) {
        double A_ip = a[i+p*m];
        double B_pj = b[p+j*k];
        double C_ij = c[i+j*m];
        C_ij = C_ij + A_ip * B_pj;
        c[i+j*m] = C_ij;
      }
    }
  }
---------------------------------------------------------
 Dimension       Time    Gflop/s       GB/s        Error
        16   0.443267  22.559779  72.191293 1.385951e+06
        64   0.382303  26.159343  83.709899 9.440258e+04
       112   0.404769  24.713105  79.081937 2.693089e+04
       160   0.479388  20.933362  66.986758 1.233188e+04
       208   0.505835  19.925023  63.760074 7.315887e+03
       256   0.580224  17.349041  55.516931 4.826596e+03
       304   0.525271  19.254821  61.615426 3.267805e+03
       352   0.516656  19.415768  62.130458 2.471286e+03
       400   0.535287  19.129938  61.215802 1.891448e+03
       448   0.600799  17.959149  57.469276 1.574612e+03
       496   0.687719  15.968950  51.100639 1.312905e+03
       544   0.722763  15.591895  49.894065 1.104834e+03
       592   0.806292  12.865974  41.171116 8.560616e+02
       640   0.930028  11.274666  36.078931 7.445709e+02
       688   1.100728  11.834371  37.869988 7.953869e+02
       736   1.020092  11.725073  37.520233 6.299729e+02
       784   1.341760  10.774441  34.478211 6.724575e+02
       832   1.103178  10.441293  33.412138 4.889743e+02
       880   1.279146  10.655113  34.096361 4.996540e+02
       928   1.456623  10.973032  35.113704 5.309204e+02
       976   1.935436   9.607285  30.743311 5.570778e+02
      1024   1.008067  10.651494  34.084782 2.879263e+02
      1072   1.134057  10.862992  34.761574 3.032963e+02
      1120   1.341721  10.471090  33.507488 3.193277e+02
      1168   1.528606  10.423967  33.356695 3.318287e+02
      1216   2.253646   7.978387  25.530837 3.425009e+02
      1264   2.236748   9.028677  28.891768 3.541980e+02
      1312   2.453172   9.206052  29.459368 3.661419e+02
      1360   2.352357  10.693344  34.218699 3.795629e+02
      1408   2.828746   9.867655  31.576497 3.887651e+02
      1456   3.552703   8.688108  27.801946 4.048556e+02
      1504   3.230566  10.530885  33.698831 4.184804e+02
      1552   3.627465  10.305568  32.977818 4.322260e+02
      1600   3.818232  10.727479  34.327931 4.431469e+02
      1648   4.873740   9.183522  29.387272 4.596910e+02
      1696   4.618035  10.563803  33.804169 4.692641e+02
      1744   5.323432   9.964321  31.885828 4.866494e+02
      1792   5.119485  11.240554  35.969773 4.954003e+02
      1840   5.545147  11.234155  35.949295 5.048999e+02
      1888   5.938481  11.332628  36.264410 5.153721e+02
      1936   6.480016  11.197987  35.833559 5.383513e+02
      1984   6.971306  11.202394  35.847661 5.441071e+02
---------------------------------------------------------
  for (long i = 0; i < m; i++) {
    for (long p = 0; p < k; p++) {
      for (long j = 0; j < n; j++) {
        double A_ip = a[i+p*m];
        double B_pj = b[p+j*k];
        double C_ij = c[i+j*m];
        C_ij = C_ij + A_ip * B_pj;
        c[i+j*m] = C_ij;
      }
    }
  }
---------------------------------------------------------
 Dimension       Time    Gflop/s       GB/s        Error
        16   0.831726  12.023210  38.474271 1.385951e+06
        64   1.129370   8.855198  28.336633 9.440258e+04
       112   0.852691  11.731193  37.539817 2.693089e+04
       160   2.188454   4.585520  14.673664 1.233188e+04
       208   1.632355   6.174381  19.758021 7.315887e+03
       256   6.544950   1.538030   4.921696 4.826596e+03
       304   2.056883   4.917151  15.734884 3.267805e+03
       352   2.515257   3.988168  12.762137 2.471286e+03
       400   2.594196   3.947273  12.631274 1.891448e+03
       448   3.772253   2.860319   9.153021 1.574612e+03
       496   2.778689   3.952279  12.647291 1.312905e+03
       544   3.874281   2.908732   9.307941 1.104834e+03
       592   3.021349   3.433478  10.987128 8.560616e+02
       640   6.264938   1.673721   5.355908 7.445709e+02
       688   7.264957   1.793049   5.737758 7.953869e+02
       736   5.198928   2.300599   7.361916 6.299729e+02
       784   9.520141   1.518539   4.859326 6.724575e+02
       832   8.733316   1.318927   4.220567 4.889743e+02
       880  12.045650   1.131482   3.620743 4.996540e+02
       928  15.800209   1.011605   3.237137 5.309204e+02
       976  19.938206   0.932596   2.984306 5.570778e+02
      1024  32.984675   0.325527   1.041688 2.879263e+02
      1072  14.446851   0.852729   2.728734 3.032963e+02
      1120  16.005068   0.877802   2.808966 3.193277e+02
      1168  19.553367   0.814905   2.607696 3.318287e+02
      1216  22.366489   0.803902   2.572485 3.425009e+02
      1264  23.730096   0.851024   2.723276 3.541980e+02
      1312  27.648169   0.816836   2.613877 3.661419e+02
      1360  30.920882   0.813514   2.603244 3.795629e+02
      1408  44.312848   0.629910   2.015711 3.887651e+02
      1456  38.398352   0.803844   2.572299 4.048556e+02
      1504  42.949829   0.792104   2.534732 4.184804e+02
      1552  46.028193   0.812178   2.598970 4.322260e+02
      1600  53.975859   0.758858   2.428345 4.431469e+02

3.

omp_solved2

  we need private(i,tid) so that each thread gets its own number and 
  each i to be private so that threads work on separate iterations of the loop

  initialize total before the barrier so that the program does not intialize
  total separately for each thread

  we need the reduction in order to add the sums from each thread together

omp_solved3

  we removed this barrier because all the threads have to hit the 
  barriers in the same order. The two threads running the program
  will hit this barrier but the others won't so the program
  doesn't exit the threads properly

omp_solved4

  the matrix was too big to fit on the stack so we used malloc for 
  dynamic memory allocation

omp_solved5

  We need to init both locks and use them to stop the threads from accessing
  each other's information otherwise they may try accessing the data before
  it has been properly initialized by the other thread.

omp_solved6

 sum needs to be a global variable 

4.
Paralellizing does not significantly improve the performance of either algorithm. This is likely because the problem is heavily bandwidth bound for large matrices and for smaller ones, the overhead does not make up for the increase in speed due to multiple threads. Running on Intel i5-6300U.

Gauss-Seidel
----------------------------------------------

N = 10000, 3 iterations
  threads = 1: total time = 98.7836: Error = 14138.1
  threads = 2: total time = 81.9732: Error = 14138.1
  threads = 3: total time = 81.3588: Error = 14138.1
  threads = 4: total time = 81.6189: Error = 14138.1

N = 5000, 3 iterations
  threads = 1: total time = 10.4809: Error  = 7067.01
  threads = 2: total time = 10.1384: Error  = 7067.01
  threads = 3: total time = 11.0352: Error  = 7067.01
  threads = 4: total time = 11.1296 : Error = 7067.01

N = 2000, 3 iterations
  threads = 1: total time = 0.773186: Error = 2728.92
  threads = 2: total time = 0.684788: Error = 2728.92
  threads = 3: total time = 0.723743: Error = 2728.92
  threads = 4: total time = 0.780129: Error = 2728.92


Jacobi 
--------------------------------------------------

N=10000, 3 iterations
  threads = 1: total time = 73.1311: Error = 9998.07
  threads = 2: total time = 81.1388: Error = 9998.07
  threads = 3: total time = 76.1949: Error = 9998.07
  threads = 4: total time = 83.0013: Error = 9998.07

N=5000, 3 iterations
  threads = 1: total time = 10.2806: Error = 4998.07
  threads = 2: total time = 7.7236: Error = 4998.07
  threads = 3: total time = 10.4535: Error = 4998.07
  threads = 4: total time = 8.41236: Error = 4998.07

N=2000, 3 iterations
  threads = 1: total time = 0.727268: Error = 1998.07
  threads = 2: total time = 0.546282: Error = 1998.07
  threads = 3: total time = 0.620042: Error = 1998.07
  threads = 4: total time = 0.673461: Error = 1998.07

